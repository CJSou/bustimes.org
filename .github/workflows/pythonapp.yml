name: Python application
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Cache virtualenv
      # this possibly maybe makes the next step a bit faster
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pypoetry
        key: ${{ runner.os }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-

    - name: Install Python dependencies
      run: |
        python -m pip install poetry
        poetry install --no-root --no-dev --remove-untracked

    - name: Install Geospatial libraries
      # required by GeoDjango
      # see https://docs.djangoproject.com/en/3.2/ref/contrib/gis/install/geolibs/
      run: |
        sudo apt-get update
        sudo apt-get install binutils libproj-dev gdal-bin

    - name: Cache npm
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-

    - name: JavaScript
      # install dependencies from package(-lock).json,
      # run ESLint, and compile the Sass to CSS
      # (some of the Python tests expect this step to have happened first)
      runs:
        using: 'node16'
      run: |
        npm install
        make lint
        make build-static

    - name: Test
      # run the Python tests
      env:
        SECRET_KEY: wormprovision
        PGHOST: localhost
        PGUSER: postgres
        PGPASSWORD: postgres
        DB_NAME: postgres
        REDIS_URL: redis://localhost:6379
      run: |
       poetry run coverage run ./manage.py collectstatic --noinput
       poetry run coverage run --append ./manage.py test
       poetry run coverage html

    - name: Upload coverage
      # upload the Python coverage.py report to https://bustimes-coverage.ams3.digitaloceanspaces.com/index.html
      continue-on-error: true
      env:
        AWS_EC2_METADATA_DISABLED: true
        AWS_ACCESS_KEY_ID: ${{ secrets.SPACE_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACE_SECRET_ACCESS_KEY }}
      run: |
        poetry run aws s3 sync htmlcov s3://bustimes-coverage --delete --endpoint-url=https://ams3.digitaloceanspaces.com --acl=public-read
