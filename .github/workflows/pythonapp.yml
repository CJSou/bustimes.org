name: Python application
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:

    - uses: actions/checkout@v3

    - name: Cache Docker
      uses: actions/cache@v3
      with:
        path: /tmp/docker-save
        key: docker-save-${{ github.sha }}
        restore-keys: docker-save-

    - run: docker load -i /tmp/docker-save/snapshot.tar || true
      if: steps.cache-docker.outputs.cache-hit == 'true'

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag bustimes:latest

    - run: |
        docker tag bustimes thing-cache \
          && mkdir -p /tmp/docker-save \
          && docker save thing-cache -o /tmp/docker-save/snapshot.tar \
          && ls -lh /tmp/docker-save \
          || true
      if: always() && steps.cache-docker.outputs.cache-hit != 'true'

    - name: Test
      # run the Python tests
      run: |
        docker run --env SECRET_KEY=trtdre3 \
                  --env DATABASE_URL=postgis://postgres:postgres@172.17.0.1/postgres \
                  --env REDIS_URL=redis://172.17.0.1:6379 \
                  bustimes bash -c "
                    poetry run coverage run ./manage.py test -v3;
                    poetry run coverage html;
                  "

    # - name: Upload coverage
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.SPACE_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACE_SECRET_ACCESS_KEY }}
    #     AWS_EC2_METADATA_DISABLED: true
    #   run: aws s3 sync htmlcov s3://bustimes-coverage --delete --endpoint-url=https://ams3.digitaloceanspaces.com --acl=public-read
