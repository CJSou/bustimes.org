name: bustimes.org

on:
  push:
  pull_request:

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    - run: npm install
    - run: npm run lint
    - run: npm test
    - run: npm run build

    - uses: actions/upload-artifact@v4
      with:
        name: dist
        path: |
          busstops/static

  test-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_INITDB_ARGS: "--no-sync"
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install Geospatial libraries
      # required by GeoDjango
      # see https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/geolibs/
      run: |
        sudo apt-get update && sudo apt-get install binutils libproj-dev gdal-bin

    - name: Install poetry
      run: pipx install poetry

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'poetry'

    - run: poetry install --with test

    - run: rm -r busstops/static

    - uses: actions/download-artifact@v4
      with:
        name: dist
        path: busstops/static

    - name: run tests
      env:
        SECRET_KEY: gdffesgfxc1as9rsxgv4
        DATABASE_URL: postgis://postgres:postgres@localhost/postgres
      run: |
        poetry run ./manage.py collectstatic --noinput && \
        poetry run coverage run --concurrency=multiprocessing ./manage.py test --parallel 2 --keepdb

    - name: generate coverage report
      run: poetry run coverage combine && poetry run coverage html

    - name: Coverage comment
      id: coverage_comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Store Pull Request comment to be posted
      uses: actions/upload-artifact@v4
      if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
      with:
        # If you use a different name, update COMMENT_ARTIFACT_NAME accordingly
        name: python-coverage-comment-action
        # If you use a different name, update COMMENT_FILENAME accordingly
        path: python-coverage-comment-action.txt
